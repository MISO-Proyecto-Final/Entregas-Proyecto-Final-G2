@startuml deployment-diagram
skinparam packageStyle rectangle

node "GCP Project" {
    node "GCP API Gateway" {
        [API Gateway] <<service>>
    }

    node "Google Kubernetes Engine" {

        rectangle mediators {
            [mobile] <<mediator>>
            [admin dashboard] <<mediator>>
            [portal] <<mediator>>
            [integration] <<mediator>>
        }

        rectangle auth {
            [authentication service] <<service>>
            [authorization service] <<service>>
        }

        rectangle "business logic" {
            [incident Process service] <<service>>
            [billing management service] <<service>>
            [user management service] <<service>>
            [suscription plan management service] <<service>>
            [analytics engine] <<service>>
            [customer tenant management service] <<service>>
            [generative ai orchestrator] <<service>>
        }

        rectangle automation {
            [email processor] <<service>>
        }

        [mediators] -down-> [business logic] : grpc
        [business logic] -right-> [commons] : grpc

        rectangle commons {
            [reporting Service] <<service>>
            [audit Service] <<service>>
            [monitoring Service] <<service>>
            [logging Service] <<service>>
            [configuration Service] <<service>>
            [file storage Service] <<service>>

            [notification service] <<service>>
            [email service] <<service>>
            [sms service] <<service>>
            [push notification service] <<service>>
        }

        
        
    }

    note top of [Google Kubernetes Engine]
        **Tacticas de Disponibilidad aplicadas para componentes de Google Kubernetes Engine**
        **Ping/Echo: ** El API Gateway actua como un supervisor y se encarga de enviar
        ping a los servicios desplegados en Google Kubernetes Engine. Este gateway, que ya está configurado
        para manejar el tráfico de entrada, puede emitir solicitudes HTTP (GET o HEAD) a los
        endpoints de salud de cada servicio de Google Kubernetes Engine. Es importante mencionar que cada componente
        de Google Kubernetes Engine tendra un endpoint de salud que responda a las solicitudes de ping.
        **Sanity Checking: **
        - Los servicios desplegados en Google Kubernetes Engine validaran las entradas externas (requests),
        asegurándo que todos los datos recibidos sean correctos y estén dentro de los rangos esperados antes de
        procesarlos (validaciones de forma de datos de entrada).
        - Cada componente validara los estados internos de cada servicio para evitar propagación
        de errores provenientes a inconsistencias internas.
        - Cada componente validara que las peticiones se reciban de manera correcta y caso contraro manejara
        las fallas rechazando solicitudes incorrectas, registrando eventos, y activar mecanismos de recuperación.
        **Scalating Restart: **
        - Los servicios desplegados en Google Kubernetes Engine se configuraran que intenten reiniciarse automáticamente
        al detectar una falla.
        - Principalmente el primer reinicio corresponde a un reinicio simple, si esto no resuelve el problema
        se procedera a un reinicio a nivel de contenedor, en caso contrario se procedera con un reinicio completo
        de Google Kubernetes Engine.
        - La configuracion a nivel de reinicio se monitoreara para registrar cada intento de reinicio y si tuvo exito
        o fracaso.
        - Adicionalmente en la configuracion se procedera a establecer un limite de intentos de reinicio para evitar
        bucles infinitos de reinicio.
    end note

    node "Cloud SQL (PostgreSQL)" {
        [user management db] <<database>>
        [subscription plan db] <<database>>
        [billing db] <<database>>
        [incident process db] <<database>>

        [analytics db] <<database>>
    }

    node "Redis Cache" {
        [cache service] <<cache>>
    }
    
    node "Public Internet Node" {
        [customer portal] <<frontend>>
        [client admin dashboard] <<frontend>>
    }

    node "GCP Pub/Sub" {
        [event bus] <<event-bus>>
    }

    node "Firebase" {
        [push notification engine] <<service>>
    }
}

node "Mobile Devices" {
    [mobile app] <<frontend>>
}

node "Notification Engine" {
    [twillio] <<service>>
    [sendgrid] <<service>>
}

node "AI Supplier" {
        [AI engine] <<service>>
}

[Public Internet Node] -down-> [GCP API Gateway] : https
[Mobile Devices] -down-> [GCP API Gateway] : https

[GCP API Gateway] -down-> [Google Kubernetes Engine] : https
[Google Kubernetes Engine] -left-> [Cloud SQL (PostgreSQL)] : jdbc
[Google Kubernetes Engine] -down-> [Redis Cache] : tcp
[Google Kubernetes Engine] <-up-> [GCP Pub/Sub] : tcp
[Google Kubernetes Engine] -down-> [Firebase] : https
[Google Kubernetes Engine] -down-> [Notification Engine] : https

[Google Kubernetes Engine] -down-> [AI Supplier] : https



@enduml
